AWSTemplateFormatVersion: '2010-09-09'
Description: Collections Cloud Formation Template

Parameters:
  ServiceName:
    Type: String
  ServicePath:
    Type: String

Resources:
  # Creates a new role for your AWS account.
  CollectionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # The trust policy that is associated with this role. Trust policies define which entities can assume the role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        # Lambda, DynamoDB & Cloudwatch Full Access
        - PolicyName: CollectionsFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - dax:*
                  - application-autoscaling:DeleteScalingPolicy
                  - application-autoscaling:DeregisterScalableTarget
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:DescribeScalingActivities
                  - application-autoscaling:DescribeScalingPolicies
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:RegisterScalableTarget
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarmHistory
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DescribeAlarmsForMetric
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:GetMetricData
                  - datapipeline:ActivatePipeline
                  - datapipeline:CreatePipeline
                  - datapipeline:DeletePipeline
                  - datapipeline:DescribeObjects
                  - datapipeline:DescribePipelines
                  - datapipeline:GetPipelineDefinition
                  - datapipeline:ListPipelines
                  - datapipeline:PutPipelineDefinition
                  - datapipeline:QueryObjects
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - iam:GetRole
                  - iam:ListRoles
                  - kms:DescribeKey
                  - kms:ListAliases
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:ListSubscriptions
                  - sns:ListSubscriptionsByTopic
                  - sns:ListTopics
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:SetTopicAttributes
                  - lambda:CreateFunction
                  - lambda:ListFunctions
                  - lambda:ListEventSourceMappings
                  - lambda:CreateEventSourceMapping
                  - lambda:DeleteEventSourceMapping
                  - lambda:GetFunctionConfiguration
                  - lambda:DeleteFunction
                  - resource-groups:ListGroups
                  - resource-groups:ListGroupResources
                  - resource-groups:GetGroup
                  - resource-groups:GetGroupQuery
                  - resource-groups:DeleteGroup
                  - resource-groups:CreateGroup
                  - tag:GetResources
                  - kinesis:ListStreams
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                Resource: '*'
              - Effect: Allow
                Action: cloudwatch:GetInsightRuleReport
                Resource: arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
                Condition:
                  StringLike:
                    iam:PassedToService:
                      - application-autoscaling.amazonaws.com
                      - application-autoscaling.amazonaws.com.cn
                      - dax.amazonaws.com
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:AWSServiceName:
                      - replication.dynamodb.amazonaws.com
                      - dax.amazonaws.com
                      - dynamodb.application-autoscaling.amazonaws.com
                      - contributorinsights.dynamodb.amazonaws.com
                      - kinesisreplication.dynamodb.amazonaws.com
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - cloudwatch:*
                  - logs:*
                  - sns:*
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - oam:ListSinks
                Resource: '*'
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*
                Condition:
                  StringLike:
                    iam:AWSServiceName: events.amazonaws.com
              - Effect: Allow
                Action:
                  - oam:ListAttachedLinks
                Resource: arn:aws:oam:*:*:sink/*
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                  - cloudwatch:ListMetrics
                  - cloudwatch:GetMetricData
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - kms:ListAliases
                  - iam:GetPolicy
                  - iam:GetPolicyVersion
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:ListRolePolicies
                  - iam:ListRoles
                  - lambda:*
                  - logs:DescribeLogGroups
                  - states:DescribeStateMachine
                  - states:ListStateMachines
                  - tag:GetResources
                  - xray:GetTraceSummaries
                  - xray:BatchGetTraces
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:PassedToService: lambda.amazonaws.com
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*

  # The AWS::Lambda::Function resource creates a Lambda function.
  # To create a function, you need a deployment package and an execution role.
  CollectionsLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Architectures:
        - 'arm64'
      Code:
        S3Bucket: 'parisn-bucket'
        S3Key: !Sub '${ServicePath}/${ServiceName}.zip'
      Description: 'A function'
      PackageType: Zip
      MemorySize: 256
      Role: !GetAtt CollectionsRole.Arn
      Runtime: nodejs18.x
      FunctionName: !Ref ServiceName
      Timeout: 5
      # Required when using the deployment packages of S3...
      Handler: index.handler

  # The AWS::Lambda::Permission resource grants an AWS service or another account permission to use a function
  CollectionsLambdaPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CollectionsLambdaFunction
      Action: lambda:InvokeFunction
      # The principal allows you to choose which service that can invoke the lambda
      Principal: apigateway.amazonaws.com
      # Without the source too, other accounts could also configure the resources in their account to invoke the lambda.
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}:${AWS::AccountId}:apis/dlnkbdtmp6'

  # Links the API Route to the lambda
  CollectionsApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: 'dlnkbdtmp6'
      IntegrationType: 'AWS'
      IntegrationUri: !GetAtt CollectionsLambdaFunction.Arn
      IntegrationMethod: 'GET'

  # The AWS::ApiGatewayV2::Api resource creates an API.
  CollectionsApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - "CollectionsApiIntegration"
    Properties:
      RouteKey: 'GET /collections'
      ApiId: 'dlnkbdtmp6'
      Target: !Ref CollectionsApiIntegration 