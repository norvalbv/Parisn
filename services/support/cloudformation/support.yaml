AWSTemplateFormatVersion: '2010-09-09'
Description: Support Cloud Formation Template

Parameters:
  ServiceName:
    Type: String
  ServicePath:
    Type: String

Resources:
  # Creates a new role for your AWS account.
  SupportRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # The trust policy that is associated with this role. Trust policies define which entities can assume the role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        # Lambda, SES & Cloudwatch Full Access
        - PolicyName: SupportFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - cloudwatch:*
                  - sns:*
                  - oam:ListSinks
                Resource: '*'
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*
                Condition:
                  StringLike:
                    iam:AWSServiceName: events.amazonaws.com
              - Effect: Allow
                Action:
                  - oam:ListAttachedLinks
                Resource: arn:aws:oam:*:*:sink/*
              - Effect: Allow
                Action:
                  - ses:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - kms:ListAliases
                  - iam:*
                  - lambda:*
                  - logs:DescribeLogGroups
                  - states:DescribeStateMachine
                  - states:ListStateMachines
                  - tag:GetResources
                  - xray:GetTraceSummaries
                  - xray:BatchGetTraces
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringEquals:
                    iam:PassedToService: lambda.amazonaws.com
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*

  # The AWS::Lambda::Function resource creates a Lambda function.
  # To create a function, you need a deployment package and an execution role.
  SupportLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Architectures:
        - 'arm64'
      Code:
        # Bucket name
        S3Bucket: 'parisn-bucket'
        # File name
        S3Key: !Sub '${ServicePath}.zip'
      Description: 'A function'
      PackageType: Zip
      MemorySize: 256
      Role: !GetAtt SupportRole.Arn
      Runtime: nodejs18.x
      Timeout: 5
      FunctionName: !Ref ServiceName
      Handler: index.handler

  # The AWS::Lambda::Permission resource grants an AWS service or another account permission to use a function
  SupportLambdaPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SupportLambdaFunction
      Action: lambda:InvokeFunction
      # The principal allows you to choose which service that can invoke the lambda
      Principal: apigateway.amazonaws.com
      # Without the source too, other accounts could also configure the resources in their account to invoke the lambda.
      SourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}:${AWS::AccountId}:apis/dlnkbdtmp6'

  # Links the API Route to the lambda
  SupportApiIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: 'dlnkbdtmp6'
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !GetAtt SupportLambdaFunction.Arn
      PayloadFormatVersion: '2.0'
      IntegrationMethod: 'GET'

  # The AWS::ApiGatewayV2::Api resource creates an API.
  SupportApiRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    DependsOn:
      - 'SupportApiIntegration'
    Properties:
      RouteKey: 'GET /support-request'
      ApiId: 'dlnkbdtmp6'
      Target: !Join
        - /
        - - integrations
          - !Ref SupportApiIntegration
