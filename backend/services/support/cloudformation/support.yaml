Resources:
  # Creates a new role for your AWS account.
  SupportRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # The trust policy that is associated with this role. Trust policies define which entities can assume the role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SupportFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - autoscaling:Describe*
              - cloudwatch:*
              - logs:*
              - sns:*
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - oam:ListSinks
              Resource: "*"
            - Effect: Allow
              Action: iam:CreateServiceLinkedRole
              Resource: arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*
              Condition:
                StringLike:
                  iam:AWSServiceName: events.amazonaws.com
            - Effect: Allow
              Action:
              - oam:ListAttachedLinks
              Resource: arn:aws:oam:*:*:sink/*
            - Effect: Allow
              Action:
              - ses:*
              Resource: "*"
            - Effect: Allow
              Action:
              - cloudformation:DescribeStacks
              - cloudformation:ListStackResources
              - cloudwatch:ListMetrics
              - cloudwatch:GetMetricData
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - kms:ListAliases
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:ListRolePolicies
              - iam:ListRoles
              - lambda:*
              - logs:DescribeLogGroups
              - states:DescribeStateMachine
              - states:ListStateMachines
              - tag:GetResources
              - xray:GetTraceSummaries
              - xray:BatchGetTraces
              Resource: "*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  iam:PassedToService: lambda.amazonaws.com
            - Effect: Allow
              Action:
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:FilterLogEvents
              Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*

  # ! Should I create one bucket per cloud formation / lambda? How does it work?

  # The AWS::Lambda::Function resource creates a Lambda function.
  # To create a function, you need a deployment package and an execution role.
  SupportLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Architectures:
        - 'arm64'
      Code:
        S3Bucket: ''
        S3Key: ''
      Description: 'A function'
      PackageType: Zip
      MemorySize: 256
      Role: !GetAtt ExecutionRoleForSupport.Arn
      Runtime: nodejs18.x
      Timeout: 5

  # The AWS::Lambda::Permission resource grants an AWS service or another account permission to use a function
  SupportLambdaPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: support
      Action: lambda:InvokeFunction
      # The principal allows you to choose which service that can invoke the lambda
      Principal: apigateway.amazonaws.com
      # Without the source too, other accounts could also configure the resources in their account to invoke the lambda.
      SourceArn: !GetAtt SupportApi.Arn

  # The AWS::ApiGatewayV2::Api resource creates an API.
  SupportApi:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: v2-support-email
      ProtocolType: HTTP
      Version: 1
